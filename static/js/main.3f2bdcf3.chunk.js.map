{"version":3,"sources":["components/ColorPanel/ColorPanel.js","components/Messages/MessagesHeader.js","firebase.js","components/Messages/MessagesForm.js","components/Messages/Message.js","components/Messages/Messages.js","components/SidePanel/UserPanel.js","_actions/index.js","_actions/types.js","components/SidePanel/Channels.js","components/SidePanel/DirectMessages.js","components/SidePanel/SidePanel.js","components/MetaPanel/MetaPanel.js","components/App.js","components/Auth/Login.js","components/Auth/Register.js","_partials/Spinner.js","serviceWorker.js","_reducers/index.js","index.js"],"names":["ColorPanel","Sidebar","as","Menu","icon","inverted","vertical","visible","width","Divider","Button","size","color","MessagesHeader","props","channelName","numUniqueUsers","handleSearchChange","isPrivateChannel","Segment","clearing","Header","fluid","floated","style","marginBottom","Icon","name","Subheader","Input","onChange","placeholder","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","MessagesForm","useState","storageRef","storage","ref","uploadState","uploadTask","percentUploaded","messages","channel","currentChannel","user","currentUser","getMessagesRef","loading","errors","messagesForm","setMessagesForm","useEffect","className","label","labelPosition","value","e","target","Group","widths","content","disabled","onClick","child","id","push","set","fileUrl","message","timestamp","database","ServerValue","TIMESTAMP","uid","displayName","avatar","photoURL","createMessage","then","catch","err","console","log","Message","Comment","Avatar","src","Content","Author","Metadata","moment","fromNow","hasOwnProperty","isImage","Image","image","Text","Messages","setNumUniqueUsers","searchTerm","setsearchTerm","searchResult","setSearchResult","privateMessagesRef","messagesRef","messagesList","messagesLoading","setMessages","getMessageListeners","channelId","loadedMessages","on","item","val","countUniqueUsers","uniqurUsers","reduce","acc","includes","plural","length","numUniqueUserss","handleSearchMessage","channelMessages","regex","RegExp","newSearchResults","match","event","displayChannelName","map","key","UserPanel","Grid","background","Column","textAlign","marginTop","Row","spaced","Dropdown","text","floating","labeled","Item","auth","signOut","setCurrentChannel","type","payload","setPrivateChannel","connect","useForm","handleSubmit","register","open","setOpen","activeChannel","channels","channelname","channeldetails","channelsRef","firstLoad","channelsForm","setChannelsForm","closeModal","setFirstChannel","firstChannel","handleInputChange","setActiveChannel","loadedChannels","items","channelChange","opacity","active","Modal","basic","onClose","Form","onSubmit","data","newChannel","details","createdBy","update","Field","required","users","usersRef","connectedRef","presenceRef","directMessages","setDirectMessages","addStatusToUser","userId","connected","updatedUser","concat","isUserOnline","status","getChannelId","currentUserUid","loadedUser","snap","onDisconnect","remove","addListeners","channelData","changeChannel","fontStyle","SidePanel","fixed","fontSize","MetaPanel","state","columns","marginLeft","Login","email","password","messageTitle","messageInfo","formState","setFormState","verticalAlign","maxWidth","signInWithEmailAndPassword","signedInUser","pattern","error","to","Register","watch","pwd","history","useHistory","username","passwordconfirmation","createUserWithEmailAndPassword","createdUser","updateProfile","md5","saveUser","validate","Spinner","Dimmer","Loader","Boolean","window","location","hostname","initialUserState","isLoading","initialChannelState","rootReducer","combineReducers","action","allEnhancers","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","Root","onAuthStateChanged","setUser","clearUser","this","exact","path","component","App","Component","RootWithAuth","withRouter","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f2bdcf3.chunk.js","sourcesContent":["import React from 'react';\nimport {Sidebar,Menu,Divider,Button} from 'semantic-ui-react';\n\nfunction ColorPanel() {\n  return (\n    <Sidebar\n      as={Menu}\n      icon=\"labeled\"\n      inverted\n      vertical\n      visible\n      width=\"very thin\">\n      <Divider/>\n      <Button icon=\"add\" size=\"small\" color=\"blue\"/>\n    </Sidebar>\n  );\n}\n\nexport default ColorPanel;\n","import React from 'react';\nimport {Header,Segment,Input,Icon} from 'semantic-ui-react';\n\n\nfunction MessagesHeader(props){\n    const channelName = props.channelName\n    const numUniqueUsers = props.numUniqueUsers\n    const handleSearchChange = props.handleSearchChange\n    const isPrivateChannel = props.isPrivateChannel\n    return(\n        <Segment clearing>\n            <Header fluid=\"true\" as=\"h2\" floated=\"left\" style={{marginBottom:0}}>\n                <span>\n                {channelName} \n                {isPrivateChannel ? '' : <Icon name={\"star outline\"} color=\"black\" />}\n                </span>\n                <Header.Subheader>{numUniqueUsers}</Header.Subheader>\n            </Header>\n            <Header floated=\"right\">\n                <Input\n                    onChange={handleSearchChange}\n                    size=\"mini\"\n                    icon=\"search\"\n                    name=\"searchTerm\"\n                    placeholder=\"Search Messages\"\n                />\n            </Header>\n        </Segment>\n    )   \n}\n\nexport default MessagesHeader;","import firebase from 'firebase/app'\nimport \"firebase/auth\"\nimport \"firebase/database\"\nimport \"firebase/storage\"\n\n// Your web app's Firebase configuration\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n  var firebaseConfig = {\n    apiKey: \"AIzaSyCWd5JLW5gswBI0dNvp57yaQi9bUZ-1lk0\",\n    authDomain: \"react-chat-cafbf.firebaseapp.com\",\n    databaseURL: \"https://react-chat-cafbf.firebaseio.com\",\n    projectId: \"react-chat-cafbf\",\n    storageBucket: \"react-chat-cafbf.appspot.com\",\n    messagingSenderId: \"423589169785\",\n    appId: \"1:423589169785:web:a6647c42f48f1b8384a2a8\",\n    measurementId: \"G-2KXMB5P97F\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  //firebase.analytics();\n\n  export default firebase;","import React, { useState, useEffect } from 'react';\nimport { Segment, Button, Input } from 'semantic-ui-react';\nimport firebase from '../../firebase';\n\nfunction MessagesForm(props) {\n    const [messagesForm, setMessagesForm] = useState({\n        storageRef: firebase.storage().ref(),\n        uploadState: '',\n        uploadTask: null,\n        percentUploaded: 0,\n        messages: '',\n        channel: props.currentChannel,\n        user: props.currentUser,\n        getMessagesRef:props.getMessagesRef,\n        loading: false,\n        errors: []\n    })\n\n    const handleInputChange = (e) => {\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n        setMessagesForm({\n            ...messagesForm,\n            [name]: value\n        })\n    }\n    const createMessage = (fileUrl = null) => {\n        const message = {\n            timestamp: firebase.database.ServerValue.TIMESTAMP,\n            user: {\n                id: messagesForm.user.uid,\n                name: messagesForm.user.displayName,\n                avatar: messagesForm.user.photoURL\n            },\n            content: messagesForm.messages\n        }\n        if (fileUrl !== null) {\n            message['image'] = fileUrl;\n        } else {\n            message['content'] = messagesForm.messages;\n        }\n        return message;\n    }\n    const sendMessage = () => {\n        const channel = props.currentChannel\n        const message = messagesForm.messages\n        if (message) {\n            messagesForm.getMessagesRef()\n                .child(channel.id)\n                .push()\n                .set(createMessage())\n                .then(() => {\n                    setMessagesForm({\n                        ...messagesForm,\n                        loading: false,\n                        messages: ''\n                    })\n                })\n                .catch(err => {\n                    console.log(err)\n                    setMessagesForm({\n                        ...messagesForm,\n                        loading: false\n                    })\n                })\n        } else {\n            console.log(2)\n        }\n    }\n    useEffect(() => {\n    }, [messagesForm]);\n    return (\n        <Segment className=\"messages__form\">\n            <Input\n                fluid\n                name=\"messages\"\n                style={{ marginBottom: '0.7em' }}\n                label={<Button icon={'add'} />}\n                labelPosition=\"left\"\n                placeholder=\"Write your message\"\n                value={messagesForm.messages}\n                onChange={handleInputChange}\n            />\n            <Button.Group icon widths=\"2\">\n                <Button\n                    color=\"orange\"\n                    content=\"Add Reply\"\n                    labelPosition=\"left\"\n                    icon=\"edit\"\n                    disabled={messagesForm.loading}\n                    onClick={sendMessage}\n                />\n            </Button.Group>\n        </Segment>\n    )\n}\n\nexport default MessagesForm;","import React from 'react';\nimport moment from 'moment';\nimport {Comment , Image} from 'semantic-ui-react'\n\nconst timeFromNow = timestamp => moment(timestamp).fromNow()\n\nconst isImage = (message) => {\n    return message.hasOwnProperty('image') && !message.hasOwnProperty('content');\n}\n\nconst Message = ({message}) => (\n    <Comment>\n        <Comment.Avatar src={message.user.avatar}></Comment.Avatar>\n        <Comment.Content className=\"message__self\">\n            <Comment.Author as=\"a\">{message.user.name}</Comment.Author>\n            <Comment.Metadata>{timeFromNow(message.timestamp)}</Comment.Metadata>\n            {\n                isImage(message) ? \n                <Image src={message.image} className=\"message_image\"/> :\n                <Comment.Text>{message.content}</Comment.Text>\n            }\n        </Comment.Content>\n    </Comment>\n)\n\nexport default Message;","import React, { useState , useEffect } from 'react';\nimport {Segment,Comment} from 'semantic-ui-react';\nimport MessagesHeader from './MessagesHeader';\nimport MessagesForm from './MessagesForm';\nimport Message from './Message';\nimport firebase from '../../firebase';\n\nfunction Messages(props) {\n  const channel = props.currentChannel;\n  const user = props.currentUser;\n  const isPrivateChannel = props.isPrivateChannel;\n  const [numUniqueUsers,setNumUniqueUsers] = useState('');\n  const [searchTerm,setsearchTerm] = useState('');\n  const [searchResult,setSearchResult] = useState([]);\n  const [privateMessagesRef] = useState(firebase.database().ref('privateMessages'))\n  const [messages,setMessages] = useState({\n    messagesRef:firebase.database().ref('messages'),\n    messagesList:[],\n    messagesLoading:true,\n  })\n  const getListeners = () => {\n    if(user && channel){\n      getMessageListeners(channel.id)\n    }\n  }\n  const getMessageListeners = channelId => {\n    let loadedMessages = [];\n    const ref = getMessagesRef()\n    ref.child(channelId).on('child_added',item=>{\n      loadedMessages.push(item.val())\n      setMessages({\n        ...messages,\n        messagesList:loadedMessages,\n        messagesLoading:false\n      })\n    })\n    countUniqueUsers(loadedMessages)\n  }\n\n  const countUniqueUsers = messages => {\n    const uniqurUsers = messages.reduce((acc,message)=>{\n      if(!acc.includes(message.user.name)){\n        acc.push(message.user.name)\n      }\n      return acc;\n    },[]);\n    const plural = uniqurUsers.length > 1 || uniqurUsers.length === 0;\n    const numUniqueUserss = `${uniqurUsers.length} user${plural ? \"s\" : \"\"}`;\n    setNumUniqueUsers(numUniqueUserss)\n  }\n\n  const displayChannelName = channel =>  {\n    return channel ? `${isPrivateChannel ? '@' : '#'} ${channel.name}`:'';\n  }\n\n  const getMessagesRef = () => {\n    return isPrivateChannel ? privateMessagesRef : messages.messagesRef\n  }\n\n  const handleSearchChange = event => {\n    setsearchTerm(event.target.value)\n    handleSearchMessage();\n  }\n\n  const handleSearchMessage = () => {\n    const channelMessages = messages.messagesList;\n    const regex = new RegExp(searchTerm,'gi');\n    const newSearchResults = channelMessages.reduce((acc,message)=>{\n      if( (message.content && message.content.match(regex)) || message.user.name.match(regex)) {\n        acc.push(message);\n      }\n      return acc;\n    },[])\n    setSearchResult(newSearchResults)\n  }\n  useEffect(getListeners, [])\n  return (\n    <div>\n    <MessagesHeader\n      numUniqueUsers={numUniqueUsers}\n      handleSearchChange={handleSearchChange}\n      channelName={displayChannelName(channel)}\n      isPrivateChannel={isPrivateChannel}\n    />\n    <Segment>\n      <Comment.Group className=\"messages\">\n        \n        {\n          searchTerm \n          ? \n          searchResult.map(message=>(\n              <Message\n                key={message.timestamp}\n                message={message}\n              />\n            ))\n          : \n          messages.messagesList.map(message=>(\n            <Message\n              key={message.timestamp}\n              message={message}\n            />\n          ))\n        }\n      </Comment.Group>\n    </Segment>\n    <MessagesForm\n      messagesRef={messages.messagesRef}\n      currentChannel={channel}\n      currentUser={user}\n      isPrivateChannel={isPrivateChannel}\n      getMessagesRef={getMessagesRef}\n    />\n    </div>\n\n  );\n}\n\nexport default Messages;\n","import React from 'react';\nimport { Grid, Header, Dropdown , Image } from 'semantic-ui-react';\nimport firebase from '../../firebase'\n\nfunction UserPanel(props) {\n    const handeSignOut = () => {\n        firebase\n            .auth()\n            .signOut()\n    }\n    const user = props.currentUser.currentUser\n    return (\n        <Grid style={{ background: '#4c3c4c' }}>\n            <Grid.Column style={{ textAlign: \"center\", marginTop: 10 }}>\n                <Grid.Row >\n                    <Header inverted as=\"h2\">\n                        <Header.Content>React Chat</Header.Content>\n                    </Header>\n                    <Image src={user.photoURL} spaced=\"right\" avatar />\n                    <Dropdown\n                        text={user.displayName}\n                        floating\n                        labeled\n                        className='icon' style={{color:\"white\"}}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item>Signed in as</Dropdown.Item>\n                            <Dropdown.Item>Change Avatar</Dropdown.Item>\n                            <Dropdown.Item onClick={handeSignOut}>Sign Out</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Grid.Row>\n            </Grid.Column>\n        </Grid>\n    )\n}\n\n\nexport default UserPanel","import * as actionTypes from './types'\n\nexport const setUser = user => {\n    return {\n        type:actionTypes.SET_USER,\n        payload:{\n            currentUser:user    \n        }\n    }\n}\n\nexport const clearUser = () => {\n    return {\n        type:actionTypes.CLEAR_USER,\n    }\n}\n\n\nexport const setCurrentChannel = channel => {\n    return {\n        type:actionTypes.SET_CURRENT_CHANNEL,\n        payload:{\n            currentChannel:channel\n        }\n    }\n}\n\nexport const setPrivateChannel = isPrivateChannel => {\n    return {\n        type:actionTypes.SET_PRIVATE_CHANNEL,\n        payload:{\n            isPrivateChannel\n        }\n    }\n}","export const SET_USER = 'SET_USER';\nexport const CLEAR_USER = 'CLEAR_USER'\n\nexport const SET_CURRENT_CHANNEL = \"SET_CURRENT_CHANNEL\";\n\nexport const SET_PRIVATE_CHANNEL = \"SET_PRIVATE_CHANNEL\";","import React, { useState, useEffect } from 'react';\nimport { Menu, Icon, Modal, Form, Button } from 'semantic-ui-react';\nimport { useForm } from 'react-hook-form';\nimport {connect} from 'react-redux';\nimport {setCurrentChannel,setPrivateChannel} from '../../_actions'\nimport firebase from '../../firebase';\n\nfunction Channels(props) {\n    const user = props.currentUser.currentUser.currentUser\n    const { handleSubmit, register } = useForm();\n    const [open, setOpen] = useState(false)\n    const [channelsForm, setChannelsForm] = useState({\n        activeChannel:'',\n        channels: [],\n        channelname: '',\n        channeldetails: '',\n        channelsRef: firebase.database().ref('channels'),\n        firstLoad:true\n    })\n    const closeModal = () => setOpen(false)\n    const openModal = () => setOpen(true)\n    const getChannelList = () => {\n        let loadedChannels = [];\n        channelsForm.channelsRef.on('child_added', items => {\n            loadedChannels.push(items.val());\n            setFirstChannel(loadedChannels)\n            setChannelsForm({\n                ...channelsForm,\n                channels: loadedChannels,\n            })\n        })\n    }\n    const setFirstChannel = (channel) => {\n        const firstChannel = channel[0]\n        if( channelsForm.firstLoad && channel.length>0){\n            props.setCurrentChannel(firstChannel)\n        }\n        setChannelsForm({\n            firstLoad:false,\n            channels: channel,\n        })\n    }\n    const handleInputChange = (e) => {\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n        setChannelsForm({\n            ...channelsForm,\n            [name]: value\n        })\n    }\n    const onSubmit = data => {\n        console.log(data);\n        const key = channelsForm.channelsRef.push().key;\n        console.log(key)\n        const newChannel = {\n            id: key,\n            name: data.channelname,\n            details: data.channeldetails,\n            createdBy: {\n                name: user.displayName,\n                avatar: user.photoURL\n            }\n        }\n        channelsForm.channelsRef\n            .child(key)\n            .update(newChannel)\n            .then(() => {\n                setOpen(false)\n                console.log(\"channel added\")\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n    const channelChange = (item) => {\n        setActiveChannel(item)\n        props.setCurrentChannel(item)\n        props.setPrivateChannel(false)\n    }\n    const setActiveChannel = (item) => {\n        console.log(item)\n        setChannelsForm({\n            ...channelsForm,\n            activeChannel:item.id\n        })\n    }\n    useEffect(getChannelList, [])\n    return (\n        <div>\n            <Menu.Menu className=\"menu\">\n                <Menu.Item>\n                    <span>\n                        <Icon name=\"exchange\" />\n                        CHANNELS\n                    </span>\n                    ({channelsForm.channels.length})\n                    <Icon name=\"add\" onClick={openModal} />\n                </Menu.Item>\n                {channelsForm.channels.map(item => \n                    <Menu.Item\n                        onClick={()=>channelChange(item)}\n                        key={item.id}\n                        name={item.name}\n                        style={{ opacity: 0.7 }}\n                        active={item.id === channelsForm.activeChannel}>\n                        # {item.name}\n                    </Menu.Item>\n                )}\n            </Menu.Menu>\n            <Modal basic open={open} onClose={closeModal}>\n                <Modal.Header>Add a Channel</Modal.Header>\n                <Modal.Content>\n                    <Form onSubmit={handleSubmit(onSubmit)}>\n                        <Form.Field>\n                            <input\n                                placeholder=\"Name of Channel\"\n                                name=\"channelname\"\n                                onChange={handleInputChange}\n                                ref={register({ required: true })}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <input\n                                placeholder=\"About the Channel\"\n                                name=\"channeldetails\"\n                                onChange={handleInputChange}\n                                ref={register({ required: true })}\n                            />\n                        </Form.Field>\n                        <Button color=\"green\" inverted type=\"Submit\">\n                            <Icon name=\"checkmark\" />\n                            Add\n                        </Button>\n                        <Button color=\"red\" inverted onClick={closeModal}>\n                            <Icon name=\"remove\" />\n                            Cancel\n                        </Button>\n                    </Form>\n                </Modal.Content>\n            </Modal>\n        </div>\n\n    )\n}\n\nexport default connect(\n    null, \n    {setCurrentChannel,setPrivateChannel}\n)(Channels);\n","import React, { useState, useEffect } from 'react'\nimport firebase from '../../firebase';\nimport {connect} from 'react-redux';\nimport {setCurrentChannel,setPrivateChannel} from '../../_actions';\nimport { Menu, Icon } from 'semantic-ui-react';\n\nfunction DirectMessages(props) {\n    const user = props.currentUser.currentUser;\n    const [activeChannel, setActiveChannel] = useState('');\n    const [directMessages, setDirectMessages] = useState({\n        users: [],\n        usersRef: firebase.database().ref('users'),\n        connectedRef: firebase.database().ref('.info/connected'),\n        presenceRef:firebase.database().ref('presence')\n    })\n    const addListeners = currentUserUid =>  {\n        let loadedUser = [];\n        directMessages.usersRef.on('child_added', snap => {\n            if (currentUserUid !== snap.key) {\n                let user = snap.val();\n                user['uid'] = snap.key;\n                user['status'] = 'offline';\n                loadedUser.push(user);\n                setDirectMessages({\n                    ...directMessages,\n                    users: loadedUser\n                })\n            }\n        })\n        directMessages.connectedRef.on('value',snap => {\n            if(snap.val() === true){\n                const ref = directMessages.presenceRef.child(currentUserUid);\n                ref.set(true);\n                ref.onDisconnect().remove(err=> {\n                    if(err !== null){\n                        console.log(err)\n                    }\n                })\n            }\n        })\n        directMessages.presenceRef.on('child_added',snap => {\n            if(currentUserUid !== snap.key){\n                addStatusToUser(snap.key)\n            }\n        })\n\n        directMessages.presenceRef.on('child_moved', snap => {\n            if(currentUserUid !== snap.key){\n                addStatusToUser(snap.key, false);\n            }\n        })\n    }\n    \n    const addStatusToUser = (userId,connected = true) => {\n        const updatedUser = directMessages.users.reduce((acc,user)=> {\n            if(user.uid === userId){\n                user['status'] = `${connected ? 'online' : 'offline'}`\n            }\n            return acc.concat(user);\n        },[])\n        setDirectMessages({\n            ...directMessages,\n            users:updatedUser\n        })\n    }\n\n    const isUserOnline = user => user.status === 'online'\n\n    const changeChannel = user => {\n        const channelId = getChannelId(user.uid);\n        const channelData = {\n            id:channelId,\n            name:user.name\n        }\n        console.log(channelData)\n        props.setCurrentChannel(channelData)\n        props.setPrivateChannel(true);\n        setActiveChannel(user.uid)\n    }\n\n    const getChannelId = userId => {\n        return userId;\n        /*\n        const currentUserId = directMessages.user.uid\n        return userId < currentUserId ? `${userId}/${currentUserId}` : `${currentUserId}/${userId}`\n        */\n    }\n    const getListeners = () => {\n        if (user) {\n            addListeners(user.uid)\n        }\n      }\n    useEffect(getListeners,[])\n    return (\n        <Menu.Menu className=\"menu\">\n            <Menu.Item>\n                <span>\n                    <Icon name=\"mail\" /> DIRECT MESSAGES\n                </span>{''}\n                ({directMessages.users.length})\n            </Menu.Item>\n            {\n                directMessages.users.map(user=> (\n                    <Menu.Item\n                        key={user.uid}\n                        active={user.uid === activeChannel}\n                        onClick={() => changeChannel(user)}\n                        style={{opacity:0.7,fontStyle:'italic'}}\n                    >\n                        <Icon \n                            name=\"circle\"\n                            color={isUserOnline(user) ? 'green' : 'red'}\n                        />\n                        @ {user.name}\n                    </Menu.Item>\n                ))\n            }\n        </Menu.Menu>\n    )\n\n}\n\nexport default connect(\n    null,\n    {setCurrentChannel,setPrivateChannel}\n)(DirectMessages);","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport UserPanel from './UserPanel';\nimport Channels from './Channels';\nimport DirectMessages from './DirectMessages';\n\nfunction SidePanel(currentUser) {\n  return (\n    <Menu\n      size=\"large\"\n      inverted\n      fixed=\"left\"\n      vertical\n      style={{ background: \"#4c3c4c\", fontSize: \"1.2rem\" }}>\n      <UserPanel currentUser={currentUser} />\n      <Channels currentUser={currentUser}/>\n      <DirectMessages currentUser={currentUser}/>\n    </Menu>\n  );\n}\n\nexport default SidePanel;\n","import React from 'react';\n\nfunction MetaPanel() {\n  return (\n    <div className=\"App\">\n        MetaPanel\n    </div>\n  );\n}\n\nexport default MetaPanel;\n","import React from 'react'\nimport {connect} from 'react-redux';\nimport { Grid } from 'semantic-ui-react'\nimport ColorPanel from './ColorPanel/ColorPanel'\nimport Messages from './Messages/Messages'\nimport SidePanel from './SidePanel/SidePanel'\nimport MetaPanel from './MetaPanel/MetaPanel'\nimport '../_assets/stylesheets/App.css';\n\nconst App = ({currentUser,currentChannel, isPrivateChannel}) => (\n    <div className=\"App\">\n     <Grid columns=\"equal\" className=\"app\" style={{background:'#eee'}}>\n       <ColorPanel />\n       <SidePanel\n          key={currentUser && currentUser.uid}\n          currentUser={currentUser} \n          />  \n        <Grid.Column style={{marginLeft:320}}>\n          <Messages\n            key={currentChannel && currentChannel.id}\n            currentChannel={currentChannel}\n            currentUser={currentUser}\n            isPrivateChannel={isPrivateChannel}\n          />\n        </Grid.Column>\n        <Grid.Column width={4}>\n          <MetaPanel/>\n        </Grid.Column>\n     </Grid>\n    </div>\n)\n\nconst mapStateToProps = state => ({\n  currentUser:state.user.currentUser,\n  currentChannel:state.channel.currentChannel,\n  isPrivateChannel:state.channel.isPrivateChannel\n})\n\nexport default connect(mapStateToProps)(App)","import React, { useState } from 'react'\nimport {Link} from 'react-router-dom'\nimport {Grid,Form,Segment,Button,Header,Message} from 'semantic-ui-react'\nimport {useForm} from 'react-hook-form'\nimport firebase from '../../firebase'\n\nfunction Login(){\n    const { register, handleSubmit,errors} = useForm();\n    const [open,setOpen] = useState(false)\n    const [formState,setFormState] = useState({\n        email:'',\n        password:'',\n        loading:false,\n        messageTitle:'',\n        messageInfo:'',\n        usersRef:firebase.database().ref('users')\n    })\n    const handleInputChange = (e) => {\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n        setFormState({\n            ...formState,\n            [name]:value\n        })\n        console.log(formState)\n    }\n    const onSubmit = data => {\n        console.log(data);\n        setFormState({\n            loading:true\n        });\n        firebase\n            .auth()\n            .signInWithEmailAndPassword(data.email,data.password)\n            .then(signedInUser => {\n                console.log(1)\n                console.log(signedInUser)\n            })\n            .catch(err=>{\n                console.log(2)\n                console.log(err)\n                setFormState({\n                    loading:false,\n                    messageInfo:err.message,\n                    messageTitle:\"Error\"\n                })\n                setOpen(true)\n            })\n    }\n    return(\n        <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\n            <Grid.Column style={{maxWidth:450}}>\n                <Header as=\"h2\" icon color=\"blue\" textAlign=\"center\">\n                    Chat App Login\n                </Header>\n                <Form onSubmit={handleSubmit(onSubmit)}>\n                    <Segment>\n                        <div className={errors.email ? \"field error\" : \"field\"}>\n                            <input \n                                name=\"email\" \n                                placeholder=\"Email\" \n                                type=\"email\" \n                                ref={\n                                    register({\n                                    required:\"You must specify a Email\",\n                                    pattern: {\n                                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                                    }\n                                })} \n                                onChange={handleInputChange} \n                            />\n                            <span className=\"error\">{errors.email && errors.email.message}</span>\n                        </div>\n                        <div className={errors.password ? \"field error\" : \"field\"}>\n                            <input \n                                name=\"password\" \n                                placeholder=\"Password\" \n                                type=\"password\" \n                                ref={\n                                    register({\n                                        required:\"You must specify a password\",\n                                })} \n                                onChange={handleInputChange} \n                            />\n                            <span className=\"error\">{errors.password && errors.password.message}</span>\n                        </div>\n                        <Button type=\"submit\" color=\"blue\" size=\"large\" disabled={formState.loading} className={formState.loading ? 'loading' : ''}>Submit</Button>\n                    </Segment>\n                </Form>\n                {\n                    open ? \n                    <Message error>\n                        <h3>{formState.messageTitle}</h3>\n                        <span>{formState.messageInfo}</span>\n                    </Message> : ''\n                }\n                <Message><Link to=\"/register\">Sign up</Link></Message>\n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default Login","import React, { useState } from 'react'\nimport {Link,useHistory} from 'react-router-dom'\nimport {Grid,Form,Segment,Button,Header,Message} from 'semantic-ui-react'\nimport {useForm} from 'react-hook-form'\nimport md5 from 'md5'\nimport firebase from '../../firebase'\n\nfunction Register(){\n    const { register, handleSubmit,errors,watch} = useForm();\n    const [open,setOpen] = useState(false)\n    let pwd = watch(\"password\");\n    let history = useHistory();\n    const [formState,setFormState] = useState({\n        username:'',\n        email:'',\n        password:'',\n        passwordconfirmation:'',\n        loading:false,\n        messageTitle:'',\n        messageInfo:'',\n        usersRef:firebase.database().ref('users')\n    })\n    const handleInputChange = (e) => {\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n        setFormState({\n            ...formState,\n            [name]:value\n        })\n        console.log(formState)\n    }\n    const saveUser = (createdUser) => {\n        return formState.usersRef.child(createdUser.user.uid).set({\n            name:createdUser.user.displayName,\n            avatar:createdUser.user.photoURL\n        })\n    }\n    const onSubmit = data => {\n        console.log(data);\n        setFormState({\n            loading:true\n        });\n        firebase\n            .auth()\n            .createUserWithEmailAndPassword(data.email,data.password)\n            .then(createdUser=>{\n                console.log(createdUser)\n                createdUser.user.updateProfile({\n                    displayName:data.email,\n                    photoURL:`http://gravatar.com/avatar/${md5(createdUser.user.email)}?d=identicon`\n                })\n                .then(()=>{\n                    saveUser(createdUser).then(()=>{\n                        console.log(\"user saved\")\n                    })\n                    setFormState({\n                        loading:false\n                    })\n                    setOpen(false)\n                    history.push('/login')\n                })\n                .catch(err=>{\n                    console.log(err);\n                    setFormState({\n                        loading:false\n                    })\n                })\n            })\n            .catch(err=>{\n                setFormState({\n                    loading:false,\n                    messageInfo:err.message,\n                    messageTitle:\"Error\"\n                })\n                setOpen(true)\n            })\n    }\n    return(\n        <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\n            <Grid.Column style={{maxWidth:450}}>\n                <Header as=\"h2\" icon color=\"blue\" textAlign=\"center\">\n                    Chat App Register\n                </Header>\n                <Form onSubmit={handleSubmit(onSubmit)}>\n                    <Segment>\n                        <div className={errors.username ? \"field error\" : \"field\"}>\n                            <input \n                                name=\"username\" \n                                placeholder=\"Username\" \n                                type=\"text\"\n                                ref={\n                                    register({\n                                    required:\"You must specify a Username\"\n                                })} \n                                onChange={handleInputChange} \n                            />\n                            <span className=\"error\">{errors.username && errors.username.message}</span>\n                        </div>\n                        <div className={errors.email ? \"field error\" : \"field\"}>\n                            <input \n                                name=\"email\" \n                                placeholder=\"Email\" \n                                type=\"email\" \n                                ref={\n                                    register({\n                                    required:\"You must specify a Email\",\n                                    pattern: {\n                                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                                    }\n                                })} \n                                onChange={handleInputChange} \n                            />\n                            <span className=\"error\">{errors.email && errors.email.message}</span>\n                        </div>\n                        <div className={errors.password ? \"field error\" : \"field\"}>\n                            <input \n                                name=\"password\" \n                                placeholder=\"Password\" \n                                type=\"password\" \n                                ref={\n                                    register({\n                                        required:\"You must specify a password\",\n                                })} \n                                onChange={handleInputChange} \n                            />\n                            <span className=\"error\">{errors.password && errors.password.message}</span>\n                        </div>\n                        <div className={errors.passwordconfirmation ? \"field error\" : \"field\"}>\n                            <input \n                                name=\"passwordconfirmation\" \n                                placeholder=\"Password Confirmation\" \n                                type=\"password\" \n                                ref={\n                                    register({\n                                        required:\"You must specify a password\",\n                                        validate: value => value === pwd || \"The passwords do not match\"\n                                })} \n                                onChange={handleInputChange} \n                            />\n                            <span className=\"error\">{errors.passwordconfirmation && errors.passwordconfirmation.message}</span>\n                        </div>\n                        <Button type=\"submit\" color=\"blue\" size=\"large\" disabled={formState.loading} className={formState.loading ? 'loading' : ''}>Submit</Button>\n                    </Segment>\n                </Form>\n                {\n                    open ? \n                    <Message error>\n                        <h3>{formState.messageTitle}</h3>\n                        <span>{formState.messageInfo}</span>\n                    </Message> : ''\n                }\n                <Message><span>Already a user? </span><Link to=\"/login\">Login</Link></Message>\n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default Register","import React from 'react'\nimport {Loader , Dimmer} from 'semantic-ui-react';\n\nconst Spinner = () => (\n    <Dimmer active>\n        <Loader size=\"huge\" content=\"Loading\" />\n    </Dimmer>\n)\n\nexport default Spinner;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport { combineReducers } from \"redux\";\nimport * as actionTypes from '../_actions/types';\n\nconst initialUserState = {\n    currentUser: null,\n    isLoading: true\n};\n\nconst user_reducer = (state = initialUserState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_USER:\n            return {\n                currentUser: action.payload.currentUser,\n                isLoading: false\n            };\n        case actionTypes.CLEAR_USER:\n            return {\n                ...state,\n                isLoading:false\n            }\n        default:\n            return state;\n    }\n\n}\n\nconst initialChannelState = {\n    currentChannel:null,\n    isPrivateChannel:false\n}\n\nconst channel_reducer = (state = initialChannelState, action) => {\n    switch (action.type) {\n      case actionTypes.SET_CURRENT_CHANNEL:\n        return {\n          ...state,\n          currentChannel: action.payload.currentChannel\n        }\n        case actionTypes.SET_PRIVATE_CHANNEL:\n            return {\n                ...state,\n                isPrivateChannel: action.payload.isPrivateChannel   \n            }\n      default:\n        return state;\n    }\n  }\n\nconst rootReducer = combineReducers({\n    user: user_reducer,\n    channel:channel_reducer\n})\n\nexport default rootReducer;","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport Login from './components/Auth/Login';\nimport Register from './components/Auth/Register';\nimport Spinner from './_partials/Spinner';\nimport * as serviceWorker from './serviceWorker';\nimport firebase from './firebase';\nimport 'semantic-ui-css/semantic.min.css'\nimport { HashRouter as Router, Switch, Route, withRouter } from \"react-router-dom\";\nimport { setUser , clearUser } from './_actions'\n\nimport thunk from 'redux-thunk';\nimport { compose, applyMiddleware, createStore } from 'redux';\nimport { Provider, connect } from 'react-redux'\nimport rootReducer from './_reducers';\n\n\nconst allEnhancers = compose(\n  applyMiddleware(thunk),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\nconst store = createStore(rootReducer, allEnhancers);\n\n\nclass Root extends Component {\n  componentDidMount() {\n    firebase\n      .auth()\n      .onAuthStateChanged(user => {\n        if (user) {\n          this.props.setUser(user)\n          this.props.history.push(\"/\")\n        }else {\n          this.props.history.push(\"/login\")\n          this.props.clearUser();\n        }\n      })\n  }\n  render() {\n    return this.props.isLoading ? <Spinner /> :  (\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/login\" component={Login} />\n      </Switch>\n    )\n  }\n}\n\nconst mapStateFromProps = state => ({\n  isLoading:state.user.isLoading\n});\n\nconst RootWithAuth = withRouter(\n  connect(\n    mapStateFromProps, \n    { setUser , clearUser}\n    )(Root)\n);\n\nReactDOM.render(\n  <React.Fragment>\n    <Provider store={store}>\n      <Router>\n        <RootWithAuth />\n      </Router>\n    </Provider>\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}